using System.Collections;
using System.Collections.Generic;
using UnityEngine;

[RequireComponent(typeof(AudioSource))]

// public class fixedValues
// {
//     public int n; //number of samples
   
//     public int _bandnum; //number of freq bands

// }
public class InitAudio : MonoBehaviour
{
     const int size=512;
    AudioSource  _audio;
   //if i don't make it static I cant access it properly from other scripts? why public should be enough?
  
    public static float[] _sample = new float[1024]; //once i make it static it wont show up in unity cos it cant be changed
    public static int _arrsize= _sample.Length;
    // public static float[][] _freqGroupd= new float[512][];
    // for(int i=0;i < _freqGroupd.Length;i++)
    // {
    //     _freqGroupd[i]=newfloat [512];
    // }
    public static float[] _freqGroupd=new float[512];
    public static int _bandsize= _freqGroupd.Length;
    public static float[] _buffer = new float[512];
    float[] _buffreduce =new float[512];
    public float[] spectrum = new float[64];

  
    void Start()
    {
        _audio = GetComponent<AudioSource>();
    }

  
    void Update()
    {
        GetAudioSpectrum();   
        GroupFreq();
        setZdimension(spectrum);
       // GetAudioSpectrum_tutorial(); 
       Debug.Log(_prevfreqband);
    }

    void GetAudioSpectrum()
    {
        _audio.GetSpectrumData(_sample,0,FFTWindow.BlackmanHarris);
         _audio.GetSpectrumData(spectrum,0,FFTWindow.BlackmanHarris);
    }


 void GroupFreq()
    {
        /*
        220050/1024= 5.38hz/sample
        split this into 1024 bands. If I do it evenly then 21.53hz/band. 
        If I try to do it using powers of 2 like he did, I end up with
        really small values in the range 0-1 for the first few values.

         */
    int sampleID =0;
    for(int i=0;i<_bandsize;i++)
    {
    int samplePerBand= 8;
    float avg=0;
    for(int j=0;j<samplePerBand;j++)
    {
        avg+= _sample[sampleID]*(sampleID+1);
        sampleID++;
    }
    avg/=samplePerBand;
    _freqGroupd[i]=avg*10;
    }

    }



 //function to get audio using docs. figure out what it does later.
  
   
    public  float[] _prevfreqband = new float[size];
    float[] _CurFreqBand = new float[size];
    public void setZdimension(float[] spectra)
    {
        //int i=0;
        while(_audio.isPlaying)
        {
         _CurFreqBand.CopyTo(_prevfreqband,0);
         spectra.CopyTo(_CurFreqBand,0);             
        }
    }
   

    // void bufferfn()
    // {
    //     for(int i=0;i<_bandsize;i++)
    //     {
    //         if(_freqGroupd[i]>_buffer[i])
    //         {

    //         }
    //     }
    // }



      void GetAudioSpectrum_tutorial()
    {
//sample from unity documentation
        AudioListener.GetSpectrumData(spectrum, 0, FFTWindow.Rectangular);

        for (int i = 1; i < spectrum.Length - 1; i++)
        {
            Debug.DrawLine(new Vector3(i - 1, spectrum[i] + 10, 0), new Vector3(i, spectrum[i + 1] + 10, 0), Color.red);
            Debug.DrawLine(new Vector3(i - 1, Mathf.Log(spectrum[i - 1]) + 10, 2), new Vector3(i, Mathf.Log(spectrum[i]) + 10, 2), Color.cyan);
            Debug.DrawLine(new Vector3(Mathf.Log(i - 1), spectrum[i - 1] - 10, 1), new Vector3(Mathf.Log(i), spectrum[i] - 10, 1), Color.green);
            Debug.DrawLine(new Vector3(Mathf.Log(i - 1), Mathf.Log(spectrum[i - 1]), 3), new Vector3(Mathf.Log(i), Mathf.Log(spectrum[i]), 3), Color.blue);
        }
    }

}


      //  for(int i=0; i<N; i++)
        // {
        //     GameObject _SpectralBand1024 = (GameObject)Instantiate(_SpectralBands);
        //     _SpectralBand1024.transform.position = this.transform.position;
        //     _SpectralBand1024.transform.parent=this.transform;
        //     _SpectralBand1024.name="spectralBandwidth" + i;
        //     _SpectralBand1024.transform.position=new Vector3(i,i,10);
        //     _mybands[i] = _SpectralBand1024;
        // }